[tool.poetry]
name = "aleph_alpha_rag"
version = "1.0.0"
description = "Aleph Alpha Retrieval Augmented Generation"
authors = ["Marc Mezger <marc.mezger@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
langchain = "^0.1.1"
loguru = "^0.7.2"
omegaconf = "^2.3.0"
aleph-alpha-client = "^7.0.0"
python-dotenv = "^1.0.0"
httpx = "^0.26.0"
python-multipart = "^0.0.6"
fastapi = "^0.109.0"
grpcio = "^1.60.0"
grpcio-tools = "^1.60.0" # for qdrant
qdrant-client = "^1.7.1" # for qdrant
uvicorn = "^0.26.0"
nltk = "^3.8.1"
pypdfium2 = "^4.26.0"
lingua-language-detector = "^2.0.2"
pyarrow = "^15.0.0" # security issue with < 14.0.1
aiohttp = "^3.9.1" # security issue
ultra-simple-config = "^0.1.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.4.1"
pytest = "^7.4.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.settings]
known_third_party = ["aleph_alpha_client", "dotenv", "fastapi", "langchain", "langchain_community", "langchain_core", "lingua", "loguru", "nltk", "numpy", "omegaconf", "pydantic", "pytest", "qdrant_client", "requests", "starlette", "streamlit", "tqdm", "ultra_simple_config", "utility"]

[tool.mypy]
# Disallow dynamic typing
disallow_any_unimported=true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_any_explicit = true
disallow_subclassing_any = true

# Disallow untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# None and optional handling
no_implicit_optional = true

# Configuring warnings
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true

# Misc things
strict_equality = true

# Config file
warn_unused_configs = true

[tool.pylint]
max-line-length = 170

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 170
indent-width = 4
unsafe-fixes = true
# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["ALL"]
ignore = ["S101", "ERA001", "COM812", "ISC001", "D213", "D211", "TD002", "TD003", "FIX002", "D401", "ANN101", "S105", "ANN002", "ANN003"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
